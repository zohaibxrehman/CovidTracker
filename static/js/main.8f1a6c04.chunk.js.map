{"version":3,"sources":["components/Map/Map.module.css","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Tweet/Tweet.module.css","images/covidtracker.png","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Tweet/Tweet.jsx","components/Map/mapStyles.js","components/Map/Map.jsx","App.js","index.js"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","finalUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","filter1","name","iso2","filter2","forEach","i","undefined","push","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","setCountries","FormControl","formControl","Select","native","defaultValue","onChange","e","target","key","Tweet","sourceType","screenName","autoHeight","featureType","elementType","stylers","visibility","weight","codeToLatLng","require","Map","clickedCountry","setClickedCountry","Wrapper","withScriptjs","withGoogleMap","filteredCountries","covidData","countryName","countryData","mapControl","defaultZoom","defaultCenter","lat","lng","defaultOptions","mapStyles","disableDefaultUI","zoomControl","fullscreenControl","position","Number","onClick","icon","scaledSize","window","google","maps","Size","fillColor","fillOpacity","strokeColor","strokeWeight","onCloseClick","wrapControl","googleMapURL","process","loadingElement","style","height","containerElement","mapElement","App","setState","state","fetchedData","this","image","src","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f1a6c04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapControl\":\"Map_mapControl__2zS9t\",\"wrapControl\":\"Map_wrapControl__2apXN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2SHRy\",\"image\":\"App_image__3x6BT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__yLnKS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__382DU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Tweet_container__11TLN\"};","module.exports = __webpack_public_path__ + \"static/media/covidtracker.6e9de555.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3G0kX\",\"card\":\"Cards_card__2Qcpx\",\"infected\":\"Cards_infected__34TUu\",\"recovered\":\"Cards_recovered__13Rb2\",\"deaths\":\"Cards_deaths__vFt7f\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={1.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active COVID-19 cases.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={1.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recovered COVID-19 cases.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={1.5} separator=',' />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of COVID-19 deaths.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\tlet finalUrl = url;\r\n\r\n\tif (country) {\r\n\t\tfinalUrl = `${url}/countries/${country}`;\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(finalUrl);\r\n\r\n\t\treturn { confirmed, recovered, deaths, lastUpdate };\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n\ttry {\r\n\t\tconst { data } = await axios.get(`${url}/daily`);\r\n\r\n\t\treturn data.map(({ confirmed, deaths, reportDate: date }) => ({\r\n\t\t\tconfirmed: confirmed.total,\r\n\t\t\tdeaths: deaths.total,\r\n\t\t\tdate\r\n\t\t}));\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n\ttry {\r\n\t\tconst { data: { countries } } = await axios.get(`${url}/countries`);\r\n\t\tlet filter1 = countries.map((country) => {\r\n\t\t\treturn { name: country.name, iso2: country.iso2 };\r\n\t\t});\r\n\t\tlet filter2 = [];\r\n\t\tfilter1.forEach((country, i) => {\r\n\t\t\tif (country.iso2 !== undefined) {\r\n\t\t\t\tfilter2.push(country);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn filter2;\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData[0] ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => date),\r\n              datasets: [{\r\n                    data: dailyData.map((data) => data.confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: 'rgb(158,126,245)',\r\n                    backgroundColor:'rgb(0,0,255,0.2)',\r\n                    fill: true,\r\n                    }, {\r\n                    data: dailyData.map((data) => data.deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'rgb(241,71,152)',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                    },\r\n                ],\r\n            }}\r\n          />\r\n        ) : null\r\n    );\r\n    \r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgb(158,126,245)', 'rgba(0, 255, 0, 0.5)', 'rgb(241,71,152)'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n          {country ? barChart : lineChart}\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { FormControl, Select } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\tconst [ countries, setCountries ] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetCountries(await fetchCountries());\r\n\t\t};\r\n\r\n\t\tfetchAPI();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<FormControl variant=\"outlined\" className={styles.formControl}>\r\n\t\t\t<Select native defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n\t\t\t\t<option value=\"\">Global</option>\r\n\t\t\t\t{countries.map((country, i) => (\r\n\t\t\t\t\t<option key={i} value={country.name}>\r\n\t\t\t\t\t\t{country.name}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</Select>\r\n\t\t</FormControl>\r\n\t);\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\nimport { TwitterTimelineEmbed } from 'react-twitter-embed';\r\n\r\nimport styles from './Tweet.module.css';\r\n\r\nconst Tweet = () => {\r\n\treturn (\r\n\t\t<div className={styles.container}>\r\n\t\t\t<TwitterTimelineEmbed sourceType=\"profile\" screenName=\"WHO\" autoHeight />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Tweet;\r\n","export default [\r\n\t{\r\n\t\tfeatureType: 'all',\r\n\t\telementType: 'labels',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'off'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'landscape',\r\n\t\telementType: 'all',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'on'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tcolor: '#f3f4f4'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'landscape.man_made',\r\n\t\telementType: 'geometry',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tweight: 0.9\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'off'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'poi.park',\r\n\t\telementType: 'geometry.fill',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'on'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tcolor: '#83cead'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'road',\r\n\t\telementType: 'all',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'on'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tcolor: '#ffffff'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'road',\r\n\t\telementType: 'labels',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'off'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'road.arterial',\r\n\t\telementType: 'all',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'on'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tcolor: '#fee379'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'road.highway',\r\n\t\telementType: 'all',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'on'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tcolor: '#fee379'\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tfeatureType: 'water',\r\n\t\telementType: 'all',\r\n\t\tstylers: [\r\n\t\t\t{\r\n\t\t\t\tvisibility: 'on'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tcolor: '#7fc8ed'\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n];\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport styles from './Map.module.css';\r\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from 'react-google-maps';\r\nimport { fetchCountries, fetchData } from '../../api';\r\nimport mapStyles from './mapStyles';\r\n\r\nconst codeToLatLng = require('./codeToLatLng.json');\r\n\r\nconst Map = () => {\r\n\tconst [ countries, setCountries ] = useState([]);\r\n\tconst [ clickedCountry, setClickedCountry ] = useState(null);\r\n\tuseEffect(() => {\r\n\t\tconst fetchAPI = async () => {\r\n\t\t\tsetCountries(await fetchCountries());\r\n\t\t};\r\n\r\n\t\tfetchAPI();\r\n\t}, []);\r\n\r\n\tconst GMap = () => {\r\n\t\tlet filteredCountries = [];\r\n\t\tcountries.forEach((country) => {\r\n\t\t\tif (codeToLatLng[country.iso2] !== undefined) {\r\n\t\t\t\tfilteredCountries.push(country);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet covidData = {};\r\n\r\n\t\tfilteredCountries.forEach(async (country) => {\r\n\t\t\tlet countryName = country.name;\r\n\t\t\tlet countryData = await fetchData(countryName);\r\n\t\t\tcovidData[country.name] = countryData;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className={styles.mapControl}>\r\n\t\t\t\t<GoogleMap\r\n\t\t\t\t\tdefaultZoom={2}\r\n\t\t\t\t\tdefaultCenter={{ lat: 8, lng: -1 }}\r\n\t\t\t\t\tdefaultOptions={{\r\n\t\t\t\t\t\tstyles: mapStyles,\r\n\t\t\t\t\t\tdisableDefaultUI: true,\r\n\t\t\t\t\t\tzoomControl: true,\r\n\t\t\t\t\t\tfullscreenControl: true\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{filteredCountries.map((country, i) => (\r\n\t\t\t\t\t\t<Marker\r\n\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\tposition={{\r\n\t\t\t\t\t\t\t\tlat: Number(codeToLatLng[country.iso2]['coordinate'][0]),\r\n\t\t\t\t\t\t\t\tlng: Number(codeToLatLng[country.iso2]['coordinate'][1])\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tlet countryData = covidData[country.name];\r\n\t\t\t\t\t\t\t\tsetClickedCountry({ name: country.name, iso2: country.iso2, ...countryData });\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\ticon={{\r\n\t\t\t\t\t\t\t\t// path: window.google.maps.SymbolPath.CIRCLE,\r\n\t\t\t\t\t\t\t\turl: 'https://raw.githubusercontent.com/zohaibxrehman/CovidTracker/7ca9be73953c0ec8a814c204ca9f3aaf1a272959/public/virus.svg',\r\n\t\t\t\t\t\t\t\tscaledSize: new window.google.maps.Size(20, 20),\r\n\t\t\t\t\t\t\t\t// scale: 10,\r\n\t\t\t\t\t\t\t\tfillColor: 'red',\r\n\t\t\t\t\t\t\t\tfillOpacity: 0.2,\r\n\t\t\t\t\t\t\t\tstrokeColor: 'white',\r\n\t\t\t\t\t\t\t\tstrokeWeight: 0.5\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{clickedCountry &&\r\n\t\t\t\t\tclickedCountry.confirmed && (\r\n\t\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\t\tonCloseClick={() => {\r\n\t\t\t\t\t\t\t\tsetClickedCountry(null);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tposition={{\r\n\t\t\t\t\t\t\t\tlat: Number(codeToLatLng[clickedCountry.iso2]['coordinate'][0]),\r\n\t\t\t\t\t\t\t\tlng: Number(codeToLatLng[clickedCountry.iso2]['coordinate'][1])\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h2>{clickedCountry.name}</h2>\r\n\t\t\t\t\t\t\t\t<p>Cofirmed: {clickedCountry.confirmed.value}</p>\r\n\t\t\t\t\t\t\t\t<p>Recovered: {clickedCountry.recovered.value}</p>\r\n\t\t\t\t\t\t\t\t<p>Deaths: {clickedCountry.deaths.value}</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</GoogleMap>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\tconst Wrapper = withScriptjs(withGoogleMap(GMap));\r\n\r\n\treturn (\r\n\t\t<div className={styles.wrapControl}>\r\n\t\t\t<Wrapper\r\n\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process\r\n\t\t\t\t\t.env.REACT_APP_GOOGLE_KEY}`}\r\n\t\t\t\tloadingElement={<div style={{ height: `100%` }} />}\r\n\t\t\t\tcontainerElement={<div style={{ height: `100%` }} />}\r\n\t\t\t\tmapElement={<div style={{ height: `100%` }} />}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker, Tweet, Map } from './components';\r\nimport { Grid } from '@material-ui/core';\r\nimport { fetchData } from './api';\r\nimport styles from './App.module.css';\r\nimport image from './images/covidtracker.png';\r\n\r\nclass App extends React.Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tdata: {},\r\n\t\t\tcountry: ''\r\n\t\t};\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst fetchedData = await fetchData();\r\n\t\tthis.setState({ data: fetchedData });\r\n\t}\r\n\r\n\thandleCountryChange = async (country) => {\r\n\t\tconst data = await fetchData(country);\r\n\t\tthis.setState({ data, country: country });\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { data, country } = this.state;\r\n\t\treturn (\r\n\t\t\t<Grid container spacing={1}>\r\n\t\t\t\t<Grid item md={7} xs={12}>\r\n\t\t\t\t\t<div className={styles.container}>\r\n\t\t\t\t\t\t<img className={styles.image} src={image} alt=\"COVID-19\" />\r\n\t\t\t\t\t\t<CountryPicker handleCountryChange={this.handleCountryChange} />\r\n\t\t\t\t\t\t<Cards data={data} />\r\n\t\t\t\t\t\t<Chart data={data} country={country} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item md={5} xs={12}>\r\n\t\t\t\t\t<Map />\r\n\t\t\t\t\t<Tweet />\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}